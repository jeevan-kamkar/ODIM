// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: aggregator/aggregator.proto

package aggregator

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Aggregator service

type AggregatorService interface {
	AddCompute(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error)
	GetAggregationService(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error)
	DeleteCompute(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error)
	Reset(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error)
	SetDefaultBootOrder(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error)
	RediscoverSystemInventory(ctx context.Context, in *RediscoverSystemInventoryRequest, opts ...client.CallOption) (*RediscoverSystemInventoryResponse, error)
	UpdateSystemState(ctx context.Context, in *UpdateSystemStateRequest, opts ...client.CallOption) (*UpdateSystemStateResponse, error)
	AddAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error)
	GetAllAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error)
	GetAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error)
}

type aggregatorService struct {
	c    client.Client
	name string
}

func NewAggregatorService(name string, c client.Client) AggregatorService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "aggregator"
	}
	return &aggregatorService{
		c:    c,
		name: name,
	}
}

func (c *aggregatorService) AddCompute(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.AddCompute", in)
	out := new(AggregatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorService) GetAggregationService(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.GetAggregationService", in)
	out := new(AggregatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorService) DeleteCompute(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.DeleteCompute", in)
	out := new(AggregatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorService) Reset(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.Reset", in)
	out := new(AggregatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorService) SetDefaultBootOrder(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.SetDefaultBootOrder", in)
	out := new(AggregatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorService) RediscoverSystemInventory(ctx context.Context, in *RediscoverSystemInventoryRequest, opts ...client.CallOption) (*RediscoverSystemInventoryResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.RediscoverSystemInventory", in)
	out := new(RediscoverSystemInventoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorService) UpdateSystemState(ctx context.Context, in *UpdateSystemStateRequest, opts ...client.CallOption) (*UpdateSystemStateResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.UpdateSystemState", in)
	out := new(UpdateSystemStateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorService) AddAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.AddAggregationSource", in)
	out := new(AggregatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorService) GetAllAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.GetAllAggregationSource", in)
	out := new(AggregatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aggregatorService) GetAggregationSource(ctx context.Context, in *AggregatorRequest, opts ...client.CallOption) (*AggregatorResponse, error) {
	req := c.c.NewRequest(c.name, "Aggregator.GetAggregationSource", in)
	out := new(AggregatorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Aggregator service

type AggregatorHandler interface {
	AddCompute(context.Context, *AggregatorRequest, *AggregatorResponse) error
	GetAggregationService(context.Context, *AggregatorRequest, *AggregatorResponse) error
	DeleteCompute(context.Context, *AggregatorRequest, *AggregatorResponse) error
	Reset(context.Context, *AggregatorRequest, *AggregatorResponse) error
	SetDefaultBootOrder(context.Context, *AggregatorRequest, *AggregatorResponse) error
	RediscoverSystemInventory(context.Context, *RediscoverSystemInventoryRequest, *RediscoverSystemInventoryResponse) error
	UpdateSystemState(context.Context, *UpdateSystemStateRequest, *UpdateSystemStateResponse) error
	AddAggregationSource(context.Context, *AggregatorRequest, *AggregatorResponse) error
	GetAllAggregationSource(context.Context, *AggregatorRequest, *AggregatorResponse) error
	GetAggregationSource(context.Context, *AggregatorRequest, *AggregatorResponse) error
}

func RegisterAggregatorHandler(s server.Server, hdlr AggregatorHandler, opts ...server.HandlerOption) error {
	type aggregator interface {
		AddCompute(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error
		GetAggregationService(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error
		DeleteCompute(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error
		Reset(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error
		SetDefaultBootOrder(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error
		RediscoverSystemInventory(ctx context.Context, in *RediscoverSystemInventoryRequest, out *RediscoverSystemInventoryResponse) error
		UpdateSystemState(ctx context.Context, in *UpdateSystemStateRequest, out *UpdateSystemStateResponse) error
		AddAggregationSource(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error
		GetAllAggregationSource(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error
		GetAggregationSource(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error
	}
	type Aggregator struct {
		aggregator
	}
	h := &aggregatorHandler{hdlr}
	return s.Handle(s.NewHandler(&Aggregator{h}, opts...))
}

type aggregatorHandler struct {
	AggregatorHandler
}

func (h *aggregatorHandler) AddCompute(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error {
	return h.AggregatorHandler.AddCompute(ctx, in, out)
}

func (h *aggregatorHandler) GetAggregationService(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error {
	return h.AggregatorHandler.GetAggregationService(ctx, in, out)
}

func (h *aggregatorHandler) DeleteCompute(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error {
	return h.AggregatorHandler.DeleteCompute(ctx, in, out)
}

func (h *aggregatorHandler) Reset(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error {
	return h.AggregatorHandler.Reset(ctx, in, out)
}

func (h *aggregatorHandler) SetDefaultBootOrder(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error {
	return h.AggregatorHandler.SetDefaultBootOrder(ctx, in, out)
}

func (h *aggregatorHandler) RediscoverSystemInventory(ctx context.Context, in *RediscoverSystemInventoryRequest, out *RediscoverSystemInventoryResponse) error {
	return h.AggregatorHandler.RediscoverSystemInventory(ctx, in, out)
}

func (h *aggregatorHandler) UpdateSystemState(ctx context.Context, in *UpdateSystemStateRequest, out *UpdateSystemStateResponse) error {
	return h.AggregatorHandler.UpdateSystemState(ctx, in, out)
}

func (h *aggregatorHandler) AddAggregationSource(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error {
	return h.AggregatorHandler.AddAggregationSource(ctx, in, out)
}

func (h *aggregatorHandler) GetAllAggregationSource(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error {
	return h.AggregatorHandler.GetAllAggregationSource(ctx, in, out)
}

func (h *aggregatorHandler) GetAggregationSource(ctx context.Context, in *AggregatorRequest, out *AggregatorResponse) error {
	return h.AggregatorHandler.GetAggregationSource(ctx, in, out)
}
